// Copyright (C) 2018 Lee H <lee@leeh.uk>
// Licensed under the BSD 2-Clause License as found in included LICENSE file

package main

/*
This is an example hello world program built using https://github.com/leehuk/go-clicommand

It creates a program with a subcommand "hello", which has two subcommands "world"
and "say".  Both commands have shared options "-u" to uppercase the output, and
"-lower" to lowercase the output.

Once built, it could be called with the following examples:

	./helloworld hello
		Outputs: "Hello, world!"

	./helloworld hello -u
		Outputs: "HELLO, WORLD!"

	./helloworld -lower hello
		Outputs : "hello, world!"

	./helloworld say -u --say "This is a test"
		Outputs: "THIS IS A TEST"

	./helloworld
	./helloworld help
	./helloworld hello help
	./helloworld say help
		Outputs: Autogenerated help information

	./command say
		Returns error as "--say" option not specified.
*/

import (
	"fmt"
	"os"
	"strings"

	"github.com/leehuk/go-clicommand"
)

// getTextWithOptions is a simple helper function, that uses data.Options["u"]
// as a control to uppercase the string, data.Options["lower"] as a control
// to lowercase the string, or otherwise returns the string as-is
func getTextWithOptions(text string, data *clicommand.Data) string {
	if _, ok := data.Options["u"]; ok {
		return strings.ToUpper(text)
	} else if _, ok := data.Options["lower"]; ok {
		return strings.ToLower(text)
	}

	return text
}

// sayHelloWorld Handler function for "hello" -> "world" command.  Says
// "Hello, world!"
func sayHelloWorld(data *clicommand.Data) error {
	var text = getTextWithOptions("Hello, world!", data)
	fmt.Printf("%s\n", text)
	return nil
}

// sayHelloSomething Handler function for "hello" -> "say" command.  Says
// whatever is specified in data.Options["say"]
func sayHelloSomething(data *clicommand.Data) error {
	var text = getTextWithOptions(data.Options["say"], data)
	fmt.Printf("%s\n", text)
	return nil
}

func main() {
	// Our root command for the tree.  handler is specified as nil, as this
	// will have children.
	cliRoot := clicommand.NewCommand("helloworld", "Sample hello world program", nil)
	// These options are available to all subcommands
	cliRoot.NewOption("u", "Uppercase output", false)
	cliRoot.NewOption("lower", "Lowercase output", false)

	// Create a hello command off our root object
	cliRoot.NewCommand("hello", "Says hello world", sayHelloWorld)

	// Create say command off our root object
	cliSay := cliRoot.NewCommand("say", "Says something", sayHelloSomething)
	// Create a required option to hello say, with a parameter
	cliSay.NewOption("say", "Thing to say", true).SetRequired()

	if error := cliRoot.Parse(); error != nil {
		os.Exit(1)
	}
}
